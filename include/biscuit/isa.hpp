#pragma once

#include <cstdint>

// Source file for general values and data structures
// that don't fit a particular criteria related to the ISA.

namespace biscuit {

/**
 * Defines the set of features that a particular assembler instance
 * would like to assemble for.
 *
 * This allows for assertions and extra logic checking to be done.
 *
 * It can also affect various behaviors as well. e.g. LI, shifts, etc
 * will take these into account to adjust for emission on different
 * environments transparently.
 */
enum class ArchFeature : uint32_t {
    RV32,  //< 32-bit RISC-V
    RV64,  //< 64-bit RISC-V
    RV128, //< 128-bit RISC-V
};

enum class FenceOrder : uint32_t {
    W = 1, // Write
    R = 2, // Read
    O = 4, // Device Output
    I = 8, // Device Input

    RW = R | W,

    IO = I | O,
    IR = I | R,
    IW = I | W,
    IRW = I | R | W,

    OI = O | I,
    OR = O | R,
    OW = O | W,
    ORW = O | R | W,

    IORW = I | O | R | W,
};

// Atomic ordering
enum class Ordering : uint32_t {
    None = 0,       // None
    RL = 1,         // Release
    AQ = 2,         // Acquire
    AQRL = AQ | RL, // Acquire-Release
};

// Floating-point Rounding Mode
enum class RMode : uint32_t {
    RNE = 0b000, // Round to Nearest, ties to Even
    RTZ = 0b001, // Round towards Zero
    RDN = 0b010, // Round Down (towards negative infinity)
    RUP = 0b011, // Round Up (towards positive infinity)
    RMM = 0b100, // Round to Nearest, ties to Max Magnitude
    DYN = 0b111, // Dynamic Rounding Mode
};


enum class Extension : uint64_t {
    I,
    M,
    A,
    F,
    D,
    C,
    V,
    Zba,
    Zbb,
    Zbs,
    Zicboz,
    Zbc,
    Zbkb,
    Zbkc,
    Zbkx,
    Zknd,
    Zkne,
    Zknh,
    Zksed,
    Zksh,
    Zkt,
    Zvbb,
    Zvbc,
    Zvkb,
    Zvkg,
    Zvkned,
    Zvknha,
    Zvknhb,
    Zvksed,
    Zvksh,
    Zvkt,
    Zfh,
    Zfhmin,
    Zihintntl,
    Zvfh,
    Zvfhmin,
    Zfa,
    Ztso,
    Zacas,
    Zicond,
    Zihintpause,
    Zve32x,
    Zve32f,
    Zve64x,
    Zve64f,
    Zve64d,
    Zimop,
    Zca,
    Zcb,
    Zcd,
    Zcf,
    Zcmop,
    Zawrs,
    Zifencei,
    Zabha,
};

enum class Mnemonic : uint32_t {
    ADD,
    ADDI,
    AND,
    ANDI,
    AUIPC,
    BEQ,
    BEQZ,
    BGE,
    BGEU,
    BGEZ,
    BGT,
    BGTU,
    BGTZ,
    BLE,
    BLEU,
    BLEZ,
    BLT,
    BLTU,
    BLTZ,
    BNE,
    BNEZ,
    CALL,
    EBREAK,
    ECALL,
    FENCE,
    FENCEI,
    FENCETSO,
    J,
    JAL,
    JALR,
    JR,
    LB,
    LBU,
    LH,
    LHU,
    LI,
    LUI,
    LW,
    MV,
    NEG,
    NOP,
    NOT,
    OR,
    ORI,
    PAUSE,
    RET,
    SB,
    SH,
    SW,
    SEQZ,
    SGTZ,
    SLL,
    SLLI,
    SLT,
    SLTI,
    SLTIU,
    SLTU,
    SLTZ,
    SNEZ,
    SRA,
    SRAI,
    SRL,
    SRLI,
    SUB,
    XOR,
    XORI,
    ADDIW,
    ADDW,
    LD,
    LWU,
    SD,
    SLLIW,
    SRAIW,
    SRLIW,
    SLLW,
    SRAW,
    SRLW,
    SUBW,
    WRS_NTO,
    WRS_STO,
    AMOCAS_D,
    AMOCAS_Q,
    AMOCAS_W,
    AMOADD_B,
    AMOAND_B,
    AMOMAX_B,
    AMOMAXU_B,
    AMOMIN_B,
    AMOMINU_B,
    AMOOR_B,
    AMOSWAP_B,
    AMOXOR_B,
    AMOCAS_B,
    AMOADD_H,
    AMOAND_H,
    AMOMAX_H,
    AMOMAXU_H,
    AMOMIN_H,
    AMOMINU_H,
    AMOOR_H,
    AMOSWAP_H,
    AMOXOR_H,
    AMOCAS_H,
    CZERO_EQZ,
    CZERO_NEZ,
    TH_MVEQZ,
    TH_MVNEZ,
    TH_ADDSL,
    CSRRC,
    CSRRCI,
    CSRRS,
    CSRRSI,
    CSRRW,
    CSRRWI,
    CSRR,
    CSWR,
    CSRS,
    CSRC,
    CSRCI,
    CSRSI,
    CSRWI,
    FRCSR,
    FSCSR,
    FRRM,
    FSRM,
    FSRMI,
    FRFLAGS,
    FSFLAGS,
    FSFLAGSI,
    RDCYCLE,
    RDCYCLEH,
    RDINSTRET,
    RDINSTRETH,
    RDTIME,
    RDTIMEH,
    C_NTL_ALL,
    C_NTL_S1,
    C_NTL_P1,
    C_NTL_PALL,
    NTL_ALL,
    NTL_S1,
    NTL_P1,
    NTL_PALL,
    DIV,
    DIVU,
    MUL,
    MULH,
    MULHSU,
    MULHU,
    REM,
    REMU,
    DIVW,
    DIVUW,
    MULW,
    REMW,
    REMUW,
    AMOADD_W,
    AMOAND_W,
    AMOMAX_W,
    AMOMAXU_W,
    AMOMIN_W,
    AMOMINU_W,
    AMOOR_W,
    AMOSWAP_W,
    AMOXOR_W,
    LR_W,
    SC_W,
    AMOADD_D,
    AMOAND_D,
    AMOMAX_D,
    AMOMAXU_D,
    AMOMIN_D,
    AMOMINU_D,
    AMOOR_D,
    AMOSWAP_D,
    AMOXOR_D,
    LR_D,
    SC_D,
    FADD_S,
    FCLASS_S,
    FCVT_S_W,
    FCVT_S_WU,
    FCVT_W_S,
    FCVT_WU_S,
    FDIV_S,
    FEQ_S,
    FLE_S,
    FLT_S,
    FLW,
    FMADD_S,
    FMAX_S,
    FMIN_S,
    FMSUB_S,
    FMUL_S,
    FMV_W_X,
    FMV_X_W,
    FNMADD_S,
    FNMSUB_S,
    FSGNJ_S,
    FSGNJN_S,
    FSGNJX_S,
    FSQRT_S,
    FSUB_S,
    FSW,
    FABS_S,
    FMV_S,
    FNEG_S,
    FCVT_L_S,
    FCVT_LU_S,
    FCVT_S_L,
    FCVT_S_LU,
    FADD_D,
    FCLASS_D,
    FCVT_D_W,
    FCVT_D_WU,
    FCVT_W_D,
    FCVT_WU_D,
    FCVT_D_S,
    FCVT_S_D,
    FDIV_D,
    FEQ_D,
    FLE_D,
    FLT_D,
    FLD,
    FMADD_D,
    FMAX_D,
    FMIN_D,
    FMSUB_D,
    FMUL_D,
    FNMADD_D,
    FNMSUB_D,
    FSGNJ_D,
    FSGNJN_D,
    FSGNJX_D,
    FSQRT_D,
    FSUB_D,
    FSD,
    FABS_D,
    FMV_D,
    FNEG_D,
    FCVT_L_D,
    FCVT_LU_D,
    FCVT_D_L,
    FCVT_D_LU,
    FMV_D_X,
    FMV_X_D,
    FADD_Q,
    FCLASS_Q,
    FCVT_Q_W,
    FCVT_Q_WU,
    FCVT_W_Q,
    FCVT_WU_Q,
    FCVT_Q_D,
    FCVT_D_Q,
    FCVT_Q_S,
    FCVT_S_Q,
    FDIV_Q,
    FEQ_Q,
    FLE_Q,
    FLT_Q,
    FLQ,
    FMADD_Q,
    FMAX_Q,
    FMIN_Q,
    FMSUB_Q,
    FMUL_Q,
    FNMADD_Q,
    FNMSUB_Q,
    FSGNJ_Q,
    FSGNJN_Q,
    FSGNJX_Q,
    FSQRT_Q,
    FSUB_Q,
    FSQ,
    FABS_Q,
    FMV_Q,
    FNEG_Q,
    FCVT_L_Q,
    FCVT_LU_Q,
    FCVT_Q_L,
    FCVT_Q_LU,
    FADD_H,
    FCLASS_H,
    FCVT_D_H,
    FCVT_H_D,
    FCVT_H_Q,
    FCVT_H_S,
    FCVT_H_W,
    FCVT_H_WU,
    FCVT_Q_H,
    FCVT_S_H,
    FCVT_W_H,
    FCVT_WU_H,
    FDIV_H,
    FEQ_H,
    FLE_H,
    FLH,
    FLT_H,
    FMADD_H,
    FMAX_H,
    FMIN_H,
    FMSUB_H,
    FMUL_H,
    FMV_H_X,
    FMV_X_H,
    FNMADD_H,
    FNMSUB_H,
    FSGNJ_H,
    FSGNJN_H,
    FSGNJX_H,
    FSH,
    FSQRT_H,
    FSUB_H,
    FCVT_L_H,
    FCVT_LU_H,
    FCVT_H_L,
    FCVT_H_LU,
    FLI_D,
    FLI_H,
    FLI_S,
    FMINM_D,
    FMINM_H,
    FMINM_Q,
    FMINM_S,
    FMAXM_D,
    FMAXM_H,
    FMAXM_Q,
    FMAXM_S,
    FROUND_D,
    FROUND_H,
    FROUND_Q,
    FROUND_S,
    FROUNDNX_D,
    FROUNDNX_H,
    FROUNDNX_Q,
    FROUNDNX_S,
    FCVTMOD_W_D,
    FMVH_X_D,
    FMVH_X_Q,
    FMVP_D_X,
    FMVP_Q_X,
    FLEQ_D,
    FLTQ_D,
    FLEQ_H,
    FLTQ_H,
    FLEQ_Q,
    FLTQ_Q,
    FLEQ_S,
    FLTQ_S,
    FCVT_BF16_S,
    FCVT_S_BF16,
    ADDUW,
    ANDN,
    BCLR,
    BCLRI,
    BEXT,
    BEXTI,
    BINV,
    BINVI,
    BREV8,
    BSET,
    BSETI,
    CLMUL,
    CLMULH,
    CLMULR,
    CLZ,
    CLZW,
    CPOP,
    CPOPW,
    CTZ,
    CTZW,
    MAX,
    MAXU,
    MIN,
    MINU,
    ORCB,
    ORN,
    PACK,
    PACKH,
    PACKW,
    REV8,
    ROL,
    ROLW,
    ROR,
    RORI,
    RORIW,
    RORW,
    SEXTB,
    SEXTH,
    SH1ADD,
    SH1ADDUW,
    SH2ADD,
    SH2ADDUW,
    SH3ADD,
    SH3ADDUW,
    SLLIUW,
    UNZIP,
    XNOR,
    XPERM4,
    XPERM8,
    ZEXTH,
    ZEXTW,
    ZIP,
    AES32DSI,
    AES32DSMI,
    AES32ESI,
    AES32ESMI,
    AES64DS,
    AES64DSM,
    AES64ES,
    AES64ESM,
    AES64IM,
    AES64KS1I,
    AES64KS2,
    SHA256SIG0,
    SHA256SIG1,
    SHA256SUM0,
    SHA256SUM1,
    SHA512SIG0,
    SHA512SIG0H,
    SHA512SIG0L,
    SHA512SIG1,
    SHA512SIG1H,
    SHA512SIG1L,
    SHA512SUM0,
    SHA512SUM0R,
    SHA512SUM1,
    SHA512SUM1R,
    SM3P0,
    SM3P1,
    SM4ED,
    SM4KS,
    C_ADD,
    C_ADDI,
    C_ADDIW,
    C_ADDI4SPN,
    C_ADDI16SP,
    C_ADDW,
    C_AND,
    C_ANDI,
    C_BEQZ,
    C_BNEZ,
    C_EBREAK,
    C_FLD,
    C_FLDSP,
    C_FLW,
    C_FLWSP,
    C_FSD,
    C_FSDSP,
    C_FSW,
    C_FSWSP,
    C_J,
    C_JAL,
    C_JALR,
    C_JR,
    C_LD,
    C_LDSP,
    C_LI,
    C_LQ,
    C_LQSP,
    C_LUI,
    C_LW,
    C_LWSP,
    C_MV,
    C_NOP,
    C_OR,
    C_SD,
    C_SDSP,
    C_SLLI,
    C_SQ,
    C_SQSP,
    C_SRAI,
    C_SRLI,
    C_SUB,
    C_SUBW,
    C_SW,
    C_SWSP,
    C_UNDEF,
    C_XOR,
    C_LBU,
    C_LH,
    C_LHU,
    C_SB,
    C_SH,
    C_SEXT_B,
    C_SEXT_H,
    C_ZEXT_B,
    C_ZEXT_H,
    C_ZEXT_W,
    C_MUL,
    C_NOT,
    CM_MVA01S,
    CM_MVSA01,
    CM_POP,
    CM_POPRET,
    CM_POPRETZ,
    CM_PUSH,
    CM_JALT,
    CM_JT,
    CBO_CLEAN,
    CBO_FLUSH,
    CBO_INVAL,
    CBO_ZERO,
    PREFETCH_I,
    PREFETCH_R,
    PREFETCH_W,
    SSAMOSWAP_D,
    SSAMOSWAP_W,
    SSRDP,
    SSPOPCHK,
    SSPUSH,
    C_SSPOPCHK,
    C_SSPUSH,
    LPAD,
    HFENCE_GVMA,
    HFENCE_VVMA,
    HINVAL_GVMA,
    HINVAL_VVMA,
    HLV_B,
    HLV_BU,
    HLV_D,
    HLV_H,
    HLV_HU,
    HLV_W,
    HLV_WU,
    HLVX_HU,
    HLVX_WU,
    HSV_B,
    HSV_D,
    HSV_H,
    HSV_W,
    MRET,
    SCTRCLR,
    SFENCE_INVAL_IR,
    SFENCE_VMA,
    SFENCE_W_INVAL,
    SINVAL_VMA,
    SRET,
    URET,
    WFI,
    VAADD,
    VAADDU,
    VADC,
    VADD,
    VAND,
    VASUB,
    VASUBU,
    VCOMPRESS,
    VDIV,
    VDIVU,
    VFIRST,
    VID,
    VIOTA,
    VMACC,
    VMADC,
    VMADD,
    VMAND,
    VMANDNOT,
    VMNAND,
    VMNOR,
    VMOR,
    VMORNOT,
    VMXNOR,
    VMXOR,
    VMAX,
    VMAXU,
    VMERGE,
    VMIN,
    VMINU,
    VMSBC,
    VMSBF,
    VMSIF,
    VMSOF,
    VMSEQ,
    VMSGT,
    VMSGTU,
    VMSLE,
    VMSLEU,
    VMSLT,
    VMSLTU,
    VMSNE,
    VMUL,
    VMULH,
    VMULHSU,
    VMULHU,
    VMV,
    VMV1R,
    VMV2R,
    VMV4R,
    VMV8R,
    VMV_SX,
    VMV_XS,
    VNCLIP,
    VNCLIPU,
    VNMSAC,
    VNMSUB,
    VNSRA,
    VNSRL,
    VOR,
    VPOPC,
    VREDAND,
    VREDMAX,
    VREDMAXU,
    VREDMIN,
    VREDMINU,
    VREDOR,
    VREDSUM,
    VREDXOR,
    VREM,
    VREMU,
    VRGATHER,
    VRGATHEREI16,
    VRSUB,
    VSADD,
    VSADDU,
    VSBC,
    VSEXTVF2,
    VSEXTVF4,
    VSEXTVF8,
    VSLIDE1DOWN,
    VSLIDEDOWN,
    VSLIDE1UP,
    VSLIDEUP,
    VSLL,
    VSMUL,
    VSRA,
    VSRL,
    VSSRA,
    VSSRL,
    VSSUB,
    VSSUBU,
    VSUB,
    VWADD,
    VWADDW,
    VWADDU,
    VWADDUW,
    VWMACC,
    VWMACCSU,
    VWMACCU,
    VWMACCUS,
    VWMUL,
    VWMULSU,
    VWMULU,
    VWREDSUM,
    VWREDSUMU,
    VWSUB,
    VWSUBW,
    VWSUBU,
    VWSUBUW,
    VXOR,
    VZEXTVF2,
    VZEXTVF4,
    VZEXTVF8,
    VFADD,
    VFCLASS,
    VFCVT_F_X,
    VFCVT_F_XU,
    VFCVT_RTZ_X_F,
    VFCVT_RTZ_XU_F,
    VFCVT_X_F,
    VFCVT_XU_F,
    VFNCVT_F_F,
    VFNCVT_F_X,
    VFNCVT_F_XU,
    VFNCVT_ROD_F_F,
    VFNCVT_RTZ_X_F,
    VFNCVT_RTZ_XU_F,
    VFNCVT_X_F,
    VFNCVT_XU_F,
    VFWCVT_F_F,
    VFWCVT_F_X,
    VFWCVT_F_XU,
    VFWCVT_RTZ_X_F,
    VFWCVT_RTZ_XU_F,
    VFWCVT_X_F,
    VFWCVT_XU_F,
    VFDIV,
    VFRDIV,
    VFREDMAX,
    VFREDMIN,
    VFREDSUM,
    VFREDOSUM,
    VFMACC,
    VFMADD,
    VFMAX,
    VFMERGE,
    VFMIN,
    VFMSAC,
    VFMSUB,
    VFMUL,
    VFMV,
    VFMV_FS,
    VFMV_SF,
    VFNMACC,
    VFNMADD,
    VFNMSAC,
    VFNMSUB,
    VFREC7,
    VFSGNJ,
    VFSGNJN,
    VFSGNJX,
    VFSQRT,
    VFRSQRT7,
    VFSLIDE1DOWN,
    VFSLIDE1UP,
    VFSUB,
    VFRSUB,
    VFWADD,
    VFWADDW,
    VFWMACC,
    VFWMUL,
    VFWNMACC,
    VFWNMSAC,
    VFWREDSUM,
    VFWREDOSUM,
    VFWMSAC,
    VFWSUB,
    VFWSUBW,
    VMFEQ,
    VMFGE,
    VMFGT,
    VMFLE,
    VMFLT,
    VMFNE,
    MFNE,
    VLE8,
    VLE16,
    VLE32,
    VLE64,
    VLM,
    VLSE8,
    VLSE16,
    VLSE32,
    VLSE64,
    VLOXEI8,
    VLOXEI16,
    VLOXEI32,
    VLOXEI64,
    VLUXEI8,
    VLUXEI16,
    VLUXEI32,
    VLUXEI64,
    VLE8FF,
    VLE16FF,
    VLE32FF,
    VLE64FF,
    VLSEGE8,
    VLSEGE16,
    VLSEGE32,
    VLSEGE64,
    VLSSEGE8,
    VLSSEGE16,
    VLSSEGE32,
    VLSSEGE64,
    VLOXSEGEI8,
    VLOXSEGEI16,
    VLOXSEGEI32,
    VLOXSEGEI64,
    VLUXSEGEI8,
    VLUXSEGEI16,
    VLUXSEGEI32,
    VLUXSEGEI64,
    VLRE8,
    VL1RE8,
    VL2RE8,
    VL4RE8,
    VL8RE8,
    VLRE16,
    VL1RE16,
    VL2RE16,
    VL4RE16,
    VL8RE16,
    VLRE32,
    VL1RE32,
    VL2RE32,
    VL4RE32,
    VL8RE32,
    VLRE64,
    VL1RE64,
    VL2RE64,
    VL4RE64,
    VL8RE64,
    VSE8,
    VSE16,
    VSE32,
    VSE64,
    VSM,
    VSSE8,
    VSSE16,
    VSSE32,
    VSSE64,
    VSOXEI8,
    VSOXEI16,
    VSOXEI32,
    VSOXEI64,
    VSUXEI8,
    VSUXEI16,
    VSUXEI32,
    VSUXEI64,
    VSSEGE8,
    VSSEGE16,
    VSSEGE32,
    VSSEGE64,
    VSSSEGE8,
    VSSSEGE16,
    VSSSEGE32,
    VSSSEGE64,
    VSOXSEGEI8,
    VSOXSEGEI16,
    VSOXSEGEI32,
    VSOXSEGEI64,
    VSUXSEGEI8,
    VSUXSEGEI16,
    VSUXSEGEI32,
    VSUXSEGEI64,
    VSR,
    VS1R,
    VS2R,
    VS4R,
    VS8R,
    VSETIVLI,
    VSETVL,
    VSETVLI,
    VANDN,
    VBREV,
    VBREV8,
    VREV8,
    VCLZ,
    VCTZ,
    VCPOP,
    VROL,
    VROR,
    VWSLL,
    VCLMUL,
    VCLMULH,
    VGHSH,
    VGMUL,
    VAESDF_VV,
    VAESDF_VS,
    VAESDM_VV,
    VAESDM_VS,
    VAESEF_VV,
    VAESEF_VS,
    VAESEM_VV,
    VAESEM_VS,
    VAESKF1,
    VAESKF2,
    VAESZ,
    VSHA2MS,
    VSHA2CH,
    VSHA2CL,
    VSM4K,
    VSM4R_VV,
    VSM4R_VS,
    VSM3C,
    VSM3ME,
    VFNCVTBF16_F_F_W,
    VFWCVTBF16_F_F_V,
    VFWMACCBF16,
};

} // namespace biscuit
